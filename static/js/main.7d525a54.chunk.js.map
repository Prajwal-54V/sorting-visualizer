{"version":3,"sources":["Algorithms/MergeSort.js","Algorithms/BubbleSort.js","Algorithms/InsertionSort.js","Algorithms/SelectionSort.js","Components/Sorting.js","App.js","reportWebVitals.js","index.js"],"names":["mergeSortUtil","arr","start","end","tempArr","changeBars","mid","Math","floor","k","i","j","push","merge","mergeSort","length","slice","bubbleSort","temp","l","b","newA","swapped","t","swapInd","newArr","com","Sort","insertionSort","inputArr","n","current","swap","afrInd","sort","xp","yp","selectionSort","changBars","min_idx","beforeSwap","minInd","curInd","strtInd","startInd","Sorting","useState","setArr","sorting","setSorting","curSorting","setCurSorting","curSpeed","setCurSpeed","sortingCompOnes","setSortingCompOnes","generateArray","a","randomnumber","random","bars","document","getElementsByClassName","style","backgroundColor","height","color","array","selectSpeed","speed","bar","setTimeout","innerHTML","cSpeed","indOne","indSec","one","two","p","q","sorted","barOneIdx","barTwoIdx","barOneStyle","barTwoStyle","curColor","newHeight","useEffect","className","onClick","value","onChange","e","target","BubbleSort","InsertionSort","SelectionSort","MergeSort","map","ele","id","width","margin","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","getElementById"],"mappings":"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","file":"static/js/main.7d525a54.chunk.js","sourcesContent":["function merge(arr, start, mid, end, tempArr, changeBars) {\r\n  let k = start,\r\n    i = start,\r\n    j = mid + 1;\r\n\r\n  while (i <= mid && j <= end) {\r\n    changeBars.push([i, j]);\r\n    changeBars.push([i, j]);\r\n\r\n    if (tempArr[i] <= tempArr[j]) {\r\n      changeBars.push([k, tempArr[i]]);\r\n      arr[k++] = tempArr[i++];\r\n    } else {\r\n      changeBars.push([k, tempArr[j]]);\r\n      arr[k++] = tempArr[j++];\r\n    }\r\n  }\r\n\r\n  while (i <= mid) {\r\n    changeBars.push([i, i]);\r\n    changeBars.push([i, i]);\r\n    changeBars.push([k, tempArr[i]]);\r\n    arr[k++] = tempArr[i++];\r\n  }\r\n\r\n  while (j <= end) {\r\n    changeBars.push([j, j]);\r\n    changeBars.push([j, j]);\r\n    changeBars.push([k, tempArr[j]]);\r\n    arr[k++] = tempArr[j++];\r\n  }\r\n}\r\n\r\nfunction mergeSortUtil(arr, start, end, tempArr, changeBars) {\r\n  if (start === end) return;\r\n  const mid = Math.floor((start + end) / 2);\r\n  mergeSortUtil(tempArr, start, mid, arr, changeBars);\r\n  mergeSortUtil(tempArr, mid + 1, end, arr, changeBars);\r\n  merge(arr, start, mid, end, tempArr, changeBars);\r\n}\r\n\r\nexport const mergeSort = (arr) => {\r\n  const changeBars = [];\r\n  if (arr.length <= 1) return arr;\r\n  const tempArr = arr.slice();\r\n  mergeSortUtil(arr, 0, arr.length - 1, tempArr, changeBars);\r\n  return changeBars;\r\n};\r\n","function Sort(temp, changeBars) {\r\n  let l = temp.length;\r\n\r\n  for (let i = 0; i < l - 1; i++) {\r\n    for (let j = 0; j < l - i - 1; j++) {\r\n      const b = [];\r\n      let newA = [...temp];\r\n      let swapped = 0;\r\n      b.push(j);\r\n      b.push(j + 1);\r\n      if (temp[j] > temp[j + 1]) {\r\n        let t = temp[j + 1];\r\n        temp[j + 1] = temp[j];\r\n        temp[j] = t;\r\n        swapped = 1;\r\n      }\r\n      if (swapped === 1) {\r\n        changeBars.push({\r\n          swapInd: b,\r\n          newArr: newA,\r\n        });\r\n      } else {\r\n        changeBars.push({\r\n          swapInd: null,\r\n          newArr: null,\r\n        });\r\n      }\r\n    }\r\n\r\n    let com = [];\r\n    for (let k = l; k >= l - i - 1; k--) {\r\n      com.push(k);\r\n    }\r\n    changeBars.push(com);\r\n  }\r\n  changeBars.push(temp);\r\n}\r\n\r\nexport const bubbleSort = (arr) => {\r\n  const changeBars = [];\r\n  if (arr.length <= 1) return changeBars;\r\n\r\n  Sort(arr, changeBars);\r\n\r\n  return changeBars;\r\n};\r\n","function sort(inputArr, changeBars) {\r\n  let n = inputArr.length;\r\n  for (let i = 1; i < n; i++) {\r\n    let current = inputArr[i];\r\n\r\n    let j = i - 1;\r\n    while (j > -1 && current < inputArr[j]) {\r\n      inputArr[j + 1] = inputArr[j];\r\n      let t = [...inputArr];\r\n      changeBars.push({\r\n        swap: [j + 1, j],\r\n        newArr: t,\r\n      });\r\n      j--;\r\n    }\r\n\r\n    inputArr[j + 1] = current;\r\n    let t = [...inputArr];\r\n    changeBars.push({\r\n      swap: null,\r\n      afrInd: [0, j + 1, current],\r\n      newArr: t,\r\n    });\r\n  }\r\n}\r\n\r\nexport const insertionSort = (arr) => {\r\n  const changeBars = [];\r\n  if (arr.length <= 1) return changeBars;\r\n\r\n  sort(arr, changeBars);\r\n\r\n  return changeBars;\r\n};\r\n","function swap(arr, xp, yp) {\r\n  var temp = arr[xp];\r\n  arr[xp] = arr[yp];\r\n  arr[yp] = temp;\r\n}\r\n\r\nfunction sort(arr, changBars) {\r\n  let n = arr.length;\r\n  var i, j, min_idx;\r\n\r\n  // One by one move boundary of unsorted subarray\r\n  for (i = 0; i < n - 1; i++) {\r\n    // Find the minimum element in unsorted array\r\n    min_idx = i;\r\n    for (j = i + 1; j < n; j++) {\r\n      if (arr[j] < arr[min_idx]) min_idx = j;\r\n      changBars.push({ beforeSwap: 1, minInd: min_idx, curInd: j, strtInd: i });\r\n    }\r\n\r\n    // Swap the found minimum element with the first element\r\n    swap(arr, min_idx, i);\r\n    let temp = [...arr];\r\n    changBars.push({\r\n      beforeSwap: null,\r\n      newArr: temp,\r\n      startInd: i,\r\n      minInd: min_idx,\r\n    });\r\n  }\r\n}\r\n\r\nexport const selectionSort = (arr) => {\r\n  const changeBars = [];\r\n  if (arr.length <= 1) return changeBars;\r\n\r\n  sort(arr, changeBars);\r\n\r\n  return changeBars;\r\n};\r\n","import React, { useState, useEffect } from \"react\";\r\nimport \"./Sorting.css\";\r\nimport { mergeSort } from \"../Algorithms/MergeSort\";\r\nimport { bubbleSort } from \"../Algorithms/BubbleSort\";\r\nimport { insertionSort } from \"../Algorithms/InsertionSort\";\r\nimport { selectionSort } from \"../Algorithms/SelectionSort\";\r\n\r\nexport default function Sorting() {\r\n  const [arr, setArr] = useState([]);\r\n  const [sorting, setSorting] = useState(false);\r\n  const [curSorting, setCurSorting] = useState(\"Merge Sort\");\r\n  const [curSpeed, setCurSpeed] = useState(\"1x\");\r\n  const [sortingCompOnes, setSortingCompOnes] = useState(false);\r\n\r\n  //    RANDOM ARRAY GENERATING    //\r\n  async function generateArray() {\r\n    var maximum = 99;\r\n    var minimum = 10;\r\n    var l = [];\r\n    for (let i = 0; i < 37; i++) {\r\n      var randomnumber =\r\n        Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\r\n      l.push(randomnumber);\r\n    }\r\n    setArr([...l]);\r\n\r\n    const bars = document.getElementsByClassName(\"arrayElement\");\r\n    for (let i = 0; i < bars.length; i++) {\r\n      bars[i].style.backgroundColor = \"white\";\r\n      bars[i].style.height = l[i];\r\n      bars[i].style.color = \"black\";\r\n    }\r\n    setSortingCompOnes(false);\r\n\r\n    return l;\r\n  }\r\n\r\n  useEffect(() => {\r\n    generateArray();\r\n  }, []);\r\n\r\n  // const asyncSetTimeout = ({ timeout } = {}) => {\r\n  //   return new Promise((resolve, reject) =>\r\n  //     setTimeout(() => resolve(), timeout)\r\n  //   );\r\n  // };\r\n\r\n  //////////////////////////////////////////////////////////////////////\r\n  //          SELECTION SORT         //\r\n  async function SelectionSort() {\r\n    let ones = sortingCompOnes;\r\n    let array;\r\n    if (ones === true) {\r\n      array = await generateArray();\r\n    } else array = [...arr];\r\n    setSorting(true);\r\n    // let array = [...arr];\r\n    let selectSpeed = 10;\r\n\r\n    if (curSpeed === \"1x\") selectSpeed = 10;\r\n    else if (curSpeed === \"2x\") selectSpeed = 5;\r\n    else if (curSpeed === \"0.5x\") selectSpeed = 50;\r\n    else if (curSpeed === \"0.75x\") selectSpeed = 25;\r\n    else if (curSpeed === \"0.25x\") selectSpeed = 100;\r\n    else selectSpeed = 10;\r\n\r\n    let speed = selectSpeed;\r\n    // console.log(selectSpeed, speed);\r\n    const changeBars = selectionSort(array);\r\n    let n = array.length;\r\n\r\n    for (let i = 0; i < changeBars.length; i++) {\r\n      if (changeBars[i].beforeSwap !== null) {\r\n        const bars = document.getElementsByClassName(\"arrayElement\");\r\n        let bar = changeBars[i];\r\n        setTimeout(() => {\r\n          for (let j = bar.strtInd; j < n; j++) {\r\n            bars[j].style.backgroundColor = \"white\";\r\n            bars[j].style.color = \"black\";\r\n          }\r\n          bars[bar.minInd].style.backgroundColor = \"green\";\r\n          bars[bar.minInd].style.color = \"white\";\r\n          bars[bar.curInd].style.backgroundColor = \"gray\";\r\n        }, selectSpeed);\r\n        // await asyncSetTimeout(selectSpeed);\r\n        selectSpeed += speed;\r\n      } else {\r\n        const bars = document.getElementsByClassName(\"arrayElement\");\r\n        let bar = changeBars[i];\r\n        setTimeout(() => {\r\n          bars[bar.minInd].style.height = `${\r\n            (80 / 100) * bar.newArr[bar.minInd]\r\n          }vh`;\r\n          bars[bar.minInd].innerHTML = bar.newArr[bar.minInd];\r\n          bars[bar.minInd].style.backgroundColor = \"red\";\r\n          bars[bar.minInd].style.color = \"white\";\r\n\r\n          bars[bar.startInd].style.height = `${\r\n            (80 / 100) * bar.newArr[bar.startInd]\r\n          }vh`;\r\n          bars[bar.startInd].innerHTML = bar.newArr[bar.startInd];\r\n          bars[bar.startInd].style.backgroundColor = \"red\";\r\n          bars[bar.startInd].style.color = \"white\";\r\n        }, selectSpeed);\r\n        // await asyncSetTimeout(selectSpeed);\r\n\r\n        selectSpeed += speed;\r\n        setTimeout(() => {\r\n          bars[bar.minInd].style.backgroundColor = \"green\";\r\n          bars[bar.minInd].style.color = \"white\";\r\n          bars[bar.startInd].style.backgroundColor = \"green\";\r\n          bars[bar.startInd].style.color = \"white\";\r\n        }, selectSpeed);\r\n        // await asyncSetTimeout(selectSpeed);\r\n        selectSpeed += speed;\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      document.getElementsByClassName(\"arrayElement\")[\r\n        n - 1\r\n      ].style.backgroundColor = \"green\";\r\n      document.getElementsByClassName(\"arrayElement\")[n - 1].style.color =\r\n        \"white\";\r\n      setSorting(false);\r\n      setSortingCompOnes(true);\r\n      // await asyncSetTimeout(selectSpeed);\r\n    }, selectSpeed);\r\n  }\r\n\r\n  ///////////////////////////////////////////////////////////////\r\n\r\n  //         INSERTION SORT           //\r\n  async function InsertionSort() {\r\n    let ones = sortingCompOnes;\r\n    let temp;\r\n    if (ones === true) {\r\n      temp = await generateArray();\r\n    } else temp = [...arr];\r\n    setSorting(true);\r\n    // let temp = [...arr];\r\n    let selectSpeed = 10;\r\n\r\n    if (curSpeed === \"1x\") selectSpeed = 10;\r\n    else if (curSpeed === \"2x\") selectSpeed = 5;\r\n    else if (curSpeed === \"0.5x\") selectSpeed = 50;\r\n    else if (curSpeed === \"0.75x\") selectSpeed = 25;\r\n    else if (curSpeed === \"0.25x\") selectSpeed = 100;\r\n    else selectSpeed = 10;\r\n\r\n    let speed = selectSpeed;\r\n\r\n    const changeBars = insertionSort(temp);\r\n\r\n    for (let i = 0; i < changeBars.length; i++) {\r\n      if (changeBars[i].swap !== null) {\r\n        const bars = document.getElementsByClassName(\"arrayElement\");\r\n        let t = changeBars[i].newArr;\r\n\r\n        setTimeout(() => {\r\n          bars[changeBars[i].swap[0]].style.height = `${\r\n            (80 / 100) * t[changeBars[i].swap[1]]\r\n          }vh`;\r\n          bars[changeBars[i].swap[0]].innerHTML = t[changeBars[i].swap[1]];\r\n          bars[changeBars[i].swap[0]].style.backgroundColor = \"red\";\r\n          bars[changeBars[i].swap[1]].style.backgroundColor = \"red\";\r\n        }, selectSpeed);\r\n        selectSpeed += speed;\r\n        setTimeout(() => {\r\n          bars[changeBars[i].swap[0]].style.backgroundColor = \"green\";\r\n          bars[changeBars[i].swap[0]].style.color = \"white\";\r\n          bars[changeBars[i].swap[1]].style.backgroundColor = \"green\";\r\n          bars[changeBars[i].swap[1]].style.color = \"white\";\r\n        }, selectSpeed);\r\n        selectSpeed += speed;\r\n      } else {\r\n        const bars = document.getElementsByClassName(\"arrayElement\");\r\n        let bar = changeBars[i];\r\n        let t = changeBars[i].newArr;\r\n\r\n        setTimeout(() => {\r\n          for (let j = 0; j <= bar.afrInd[1]; j++) {\r\n            bars[j].style.height = `${(80 / 100) * t[j]}vh`;\r\n            bars[j].style.backgroundColor = \"green\";\r\n            bars[j].style.color = \"white\";\r\n          }\r\n        }, selectSpeed);\r\n        selectSpeed += speed;\r\n      }\r\n    }\r\n    setTimeout(() => {\r\n      setSorting(false);\r\n\r\n      setSortingCompOnes(true);\r\n    }, selectSpeed);\r\n  }\r\n\r\n  //\r\n  //\r\n  /////////////////////////////////////////////////////////////////////////////\r\n  //            BUBBLE SORT            //\r\n  async function BubbleSort() {\r\n    let ones = sortingCompOnes;\r\n    let temp;\r\n    if (ones === true) {\r\n      temp = await generateArray();\r\n    } else temp = [...arr];\r\n    setSorting(true);\r\n    // let temp = [...arr];\r\n    let selectSpeed = 10;\r\n    let cSpeed = curSpeed;\r\n    if (cSpeed === \"1x\") selectSpeed = 10;\r\n    else if (cSpeed === \"2x\") selectSpeed = 5;\r\n    else if (cSpeed === \"0.5x\") selectSpeed = 50;\r\n    else if (cSpeed === \"0.75x\") selectSpeed = 25;\r\n    else if (cSpeed === \"0.25x\") selectSpeed = 100;\r\n    else selectSpeed = 10;\r\n\r\n    let speed = selectSpeed;\r\n\r\n    const changBars = bubbleSort(temp);\r\n\r\n    const l = temp.length;\r\n    let k = 0;\r\n\r\n    let sorted = [];\r\n    for (let i = 0; i < l - 1; i++) {\r\n      for (let j = 0; j < l - i - 1; j++) {\r\n        const bars = document.getElementsByClassName(\"arrayElement\");\r\n        let bar = changBars[k++];\r\n        if (bar.swapInd !== null) {\r\n          let indOne = bar.swapInd[0];\r\n          let indSec = bar.swapInd[1];\r\n          let one = bars[indOne].style;\r\n          let two = bars[indSec].style;\r\n          let newArr = bar.newArr;\r\n\r\n          setTimeout(() => {\r\n            for (let p = 0; p < newArr.length; p++) {\r\n              bars[p].style.height = `${(80 / 100) * newArr[p]}vh`;\r\n              bars[p].innerHTML = newArr[p];\r\n            }\r\n            one.backgroundColor = \"red\";\r\n            one.color = \"white\";\r\n            two.backgroundColor = \"red\";\r\n            two.color = \"white\";\r\n          }, selectSpeed);\r\n          selectSpeed += speed;\r\n          setTimeout(() => {\r\n            one.backgroundColor = \"white\";\r\n            one.color = \"black\";\r\n            two.backgroundColor = \"white\";\r\n            two.color = \"black\";\r\n          }, selectSpeed);\r\n          selectSpeed += speed;\r\n        }\r\n      }\r\n\r\n      const bar = changBars[k++];\r\n      const bars = document.getElementsByClassName(\"arrayElement\");\r\n\r\n      setTimeout(() => {\r\n        for (let q = l - bar.length + 1; q < l; q++) {\r\n          bars[q].style.backgroundColor = \"green\";\r\n          bars[q].style.color = \"white\";\r\n        }\r\n      }, selectSpeed);\r\n      selectSpeed += speed;\r\n    }\r\n    sorted = changBars[k];\r\n    setTimeout(() => {\r\n      for (let p = 0; p < sorted.length; p++) {\r\n        bars[p].style.height = `${(80 / 100) * sorted[p]}vh`;\r\n        bars[p].innerHTML = temp[p];\r\n      }\r\n    }, selectSpeed);\r\n    selectSpeed += speed;\r\n    const bars = document.getElementsByClassName(\"arrayElement\");\r\n    setTimeout(() => {\r\n      bars[0].style.backgroundColor = \"green\";\r\n      bars[0].style.color = \"white\";\r\n      setSorting(false);\r\n\r\n      setSortingCompOnes(true);\r\n    }, selectSpeed);\r\n  }\r\n\r\n  /////////////////////////////////////////////////////////////////////////////////////////////\r\n  //||            MERGE SORT             ||\\\\\r\n  async function MergeSort() {\r\n    let ones = sortingCompOnes;\r\n    let temp;\r\n    if (ones === true) {\r\n      temp = await generateArray();\r\n    } else temp = [...arr];\r\n    setSorting(true);\r\n    // let temp = [...arr];\r\n    let selectSpeed = 10;\r\n    let cSpeed = curSpeed;\r\n    if (cSpeed === \"1x\") selectSpeed = 10;\r\n    else if (cSpeed === \"2x\") selectSpeed = 5;\r\n    else if (cSpeed === \"0.5x\") selectSpeed = 50;\r\n    else if (cSpeed === \"0.75x\") selectSpeed = 25;\r\n    else if (cSpeed === \"0.25x\") selectSpeed = 100;\r\n    else selectSpeed = 10;\r\n\r\n    let speed = selectSpeed;\r\n    // if (temp.length === 0) generateArray();\r\n    const changeBars = mergeSort(temp);\r\n    let k = 0;\r\n\r\n    for (let i = 0; i < changeBars.length; i++, k++) {\r\n      const bars = document.getElementsByClassName(\"arrayElement\");\r\n      const colorChange = i % 3 !== 2;\r\n      if (colorChange) {\r\n        const [barOneIdx, barTwoIdx] = changeBars[i];\r\n        const barOneStyle = bars[barOneIdx].style;\r\n        const barTwoStyle = bars[barTwoIdx].style;\r\n        const curColor = i % 3 === 0 ? \"red\" : \"green\";\r\n\r\n        setTimeout(() => {\r\n          barOneStyle.backgroundColor = curColor;\r\n          barOneStyle.color = \"white\";\r\n          barTwoStyle.backgroundColor = curColor;\r\n          barTwoStyle.color = \"white\";\r\n        }, selectSpeed);\r\n        selectSpeed += speed;\r\n      } else {\r\n        setTimeout(() => {\r\n          const [barOneIdx, newHeight] = changeBars[i];\r\n          const barOneStyle = bars[barOneIdx].style;\r\n          barOneStyle.height = `${(80 / 100) * newHeight}vh`;\r\n          bars[barOneIdx].innerHTML = newHeight;\r\n        }, selectSpeed);\r\n        selectSpeed += speed;\r\n      }\r\n    }\r\n\r\n    setTimeout(() => {\r\n      setSorting(false);\r\n\r\n      setSortingCompOnes(true);\r\n    }, selectSpeed);\r\n  }\r\n\r\n  function beforeSort() {\r\n    // let temp = [...arr];\r\n    // const bars = document.getElementsByClassName(\"arrayElement\");\r\n    // for (let i = 0; i < temp.length; i++) {\r\n    //   bars[i].style.height = `${(80 / 100) * temp[i]}vh`;\r\n    //   bars[i].style.backgroundColor = \"white\";\r\n    //   bars[i].style.color = \"black\";\r\n    //   bars.innerHTML = temp[i];\r\n    // }\r\n\r\n    if (curSorting === \"Bubble Sort\") {\r\n      BubbleSort();\r\n    } else if (curSorting === \"Insertion Sort\") {\r\n      InsertionSort();\r\n    } else if (curSorting === \"Selection Sort\") {\r\n      SelectionSort();\r\n    } else if (curSorting === \"Merge Sort\") {\r\n      MergeSort();\r\n    }\r\n  }\r\n\r\n  return (\r\n    <div className=\"cont\">\r\n      <div className=\"headerCont\">\r\n        <h1 className=\"heading\"> Sorting Visualizer </h1>\r\n        {sorting === false ? (\r\n          <div className=\"wrap\">\r\n            <button className=\"generateBtn\" onClick={() => generateArray()}>\r\n              Generate Array\r\n            </button>\r\n            <select\r\n              className=\"algoList\"\r\n              value={curSorting}\r\n              onChange={(e) => setCurSorting(e.target.value)}\r\n            >\r\n              <option>Bubble Sort</option>\r\n              <option>Insertion Sort</option>\r\n              <option>Selection Sort</option>\r\n              <option>Merge Sort</option>\r\n            </select>\r\n\r\n            <select\r\n              className=\"speedList\"\r\n              value={curSpeed}\r\n              onChange={(e) => setCurSpeed(e.target.value)}\r\n            >\r\n              <option>2x</option>\r\n              <option>1x</option>\r\n              <option>0.75x</option>\r\n              <option>0.5x</option>\r\n              <option>0.25x</option>\r\n            </select>\r\n            <button className=\"sortBtn\" onClick={beforeSort}>\r\n              Sort\r\n            </button>\r\n          </div>\r\n        ) : (\r\n          <div className=\"sorting\">\r\n            Sorting elements using {curSorting} at {curSpeed} speed\r\n          </div>\r\n        )}\r\n      </div>\r\n      <div className=\"arrayContainer\">\r\n        {arr.map((ele, id) => (\r\n          <div\r\n            className=\"arrayElement\"\r\n            key={id}\r\n            style={{\r\n              height: `${(80 / 100) * ele}vh`,\r\n              width: `1vw`,\r\n              margin: `0 0.6vw 0`,\r\n            }}\r\n          >\r\n            {ele}\r\n          </div>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport Sorting from \"./Components/Sorting\";\r\n\r\nexport default function App() {\r\n  return <Sorting></Sorting>;\r\n}\r\n\r\n// import React, { useState } from \"react\";\r\n// function App() {\r\n//   const [arr, setArr] = useState([]);\r\n//   const [arrswap, setArrswap] = useState([]);\r\n//   const [completed, setCompleted] = useState([]);\r\n//   const [sorting, setSorting] = useState(false);\r\n//   let speed = 250;\r\n//   var itmd = [];\r\n//   //    GENERATING RANDOM ARRAY\r\n\r\n//   function generateArray() {\r\n//     var maximum = 99;\r\n//     var minimum = 10;\r\n//     var l = [];\r\n//     for (let i = 0; i < 25; i++) {\r\n//       var randomnumber =\r\n//         Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\r\n//       l.push(randomnumber);\r\n//     }\r\n//     setArr([...l]);\r\n//     setArrswap([]);\r\n//     setCompleted([]);\r\n//   }\r\n\r\n//   //          MERGE SORT              //\r\n\r\n//   function mergeArray(start, end) {\r\n//     let mid = parseInt((start + end) >> 1);\r\n//     let start1 = start,\r\n//       start2 = mid + 1;\r\n//     let end1 = mid,\r\n//       end2 = end;\r\n\r\n//     // Initial index of merged subarray\r\n//     let index = start;\r\n\r\n//     while (start1 <= end1 && start2 <= end2) {\r\n//       if (arr[start1] <= arr[start2]) {\r\n//         itmd[index] = arr[start1];\r\n//         index = index + 1;\r\n//         start1 = start1 + 1;\r\n//       } else if (arr[start1] > arr[start2]) {\r\n//         itmd[index] = arr[start2];\r\n//         index = index + 1;\r\n//         start2 = start2 + 1;\r\n//       }\r\n//     }\r\n//     while (start1 <= end1) {\r\n//       itmd[index] = arr[start1];\r\n//       index = index + 1;\r\n//       start1 = start1 + 1;\r\n//     }\r\n\r\n//     while (start2 <= end2) {\r\n//       itmd[index] = arr[start2];\r\n//       index = index + 1;\r\n//       start2 = start2 + 1;\r\n//     }\r\n\r\n//     index = start;\r\n//     while (index <= end) {\r\n//       arr[index] = itmd[index];\r\n//       index++;\r\n//     }\r\n//   }\r\n\r\n//   function timeout(ms) {\r\n//     return new Promise((resolve) => setTimeout(resolve, ms));\r\n//   }\r\n\r\n//   // Merge Sorting\r\n//   const mergeSort = async (start, end) => {\r\n//     if (start < end) {\r\n//       let mid = parseInt((start + end) >> 1);\r\n//       await mergeSort(start, mid);\r\n//       await mergeSort(mid + 1, end);\r\n//       await mergeArray(start, end);\r\n//       await setArr(arr);\r\n\r\n//       // Waiting time is 800ms\r\n//       await timeout(500);\r\n//     }\r\n//   };\r\n\r\n//   const performer = async () => {\r\n//     let l = arr.length;\r\n//     if (l === 0) generateArray();\r\n//     for (var i = 0; i < l; i++) {\r\n//       itmd.push(0);\r\n//     }\r\n\r\n//     await mergeSort(0, l - 1);\r\n//   };\r\n\r\n//   //       BUBBLE SORT            //\r\n//   function BubbleSort() {\r\n//     let l = arr.length;\r\n//     if (l === 0) generateArray();\r\n//     let count = 250;\r\n\r\n//     setSorting(true);\r\n//     let temp = [...arr];\r\n//     for (let i = 0; i < l - 1; i++) {\r\n//       for (let j = 0; j < l - i - 1; j++) {\r\n//         if (temp[j] > temp[j + 1]) {\r\n//           let t = temp[j + 1];\r\n//           temp[j + 1] = temp[j];\r\n//           temp[j] = t;\r\n//           let snapShot = [...temp];\r\n//           setTimeout(() => {\r\n//             setArrswap([j, j + 1]);\r\n//             setArr([...snapShot]);\r\n//           }, count);\r\n//           count += 250;\r\n//         }\r\n//       }\r\n\r\n//       setTimeout(() => {\r\n//         let com = [];\r\n//         for (let k = l; k >= l - i - 1; k--) {\r\n//           com.push(k);\r\n//         }\r\n//         setCompleted([...com]);\r\n//       }, count);\r\n//     }\r\n//     count += 250;\r\n//     //after sorting\r\n//     setTimeout(() => {\r\n//       setCompleted([]);\r\n//       setArrswap([]);\r\n//       setSorting(false);\r\n//     }, count);\r\n//   }\r\n\r\n//   return (\r\n//     <div>\r\n//       <center>\r\n//         <h1 className=\"header\">Sorting Visualizer</h1>\r\n\r\n//         {sorting === false ? (\r\n//           <>\r\n//             <button className=\"header\" onClick={() => generateArray()}>\r\n//               GenerateArray()\r\n//             </button>\r\n\r\n//             <button className=\"header\" onClick={() => performer()}>\r\n//               Sort()\r\n//             </button>\r\n//           </>\r\n//         ) : (\r\n//           <>\r\n//             <button className=\"header\" disabled>\r\n//               Sorting\r\n//             </button>\r\n//           </>\r\n//         )}\r\n//       </center>\r\n//       <hr />\r\n\r\n//       <div className=\"arrayContainer\">\r\n//         <center>\r\n//           {arr.map((ele, id) => (\r\n//             <div\r\n//               className=\"arrayElement\"\r\n//               key={id}\r\n//               style={{\r\n//                 height: `${(80 / 100) * ele}vh`,\r\n//                 width: `2 vw`,\r\n//                 margin: `0 0.6vw`,\r\n//                 backgroundColor: arrswap.includes(id)\r\n//                   ? \"red\"\r\n//                   : completed.includes(id)\r\n//                   ? \"green\"\r\n//                   : \"white\",\r\n//               }}\r\n//             >\r\n//               {ele}\r\n//             </div>\r\n//           ))}\r\n//         </center>\r\n//       </div>\r\n//     </div>\r\n//   );\r\n// }\r\n\r\n// export default App;\r\n","const reportWebVitals = onPerfEntry => {\r\n  if (onPerfEntry && onPerfEntry instanceof Function) {\r\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\r\n      getCLS(onPerfEntry);\r\n      getFID(onPerfEntry);\r\n      getFCP(onPerfEntry);\r\n      getLCP(onPerfEntry);\r\n      getTTFB(onPerfEntry);\r\n    });\r\n  }\r\n};\r\n\r\nexport default reportWebVitals;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport reportWebVitals from './reportWebVitals';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want to start measuring performance in your app, pass a function\r\n// to log results (for example: reportWebVitals(console.log))\r\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\r\nreportWebVitals();\r\n"],"sourceRoot":""}